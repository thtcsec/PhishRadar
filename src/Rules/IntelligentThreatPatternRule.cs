using System.Text.RegularExpressions;
using PhishRadar.Core.Abstractions;

namespace PhishRadar.Rules;

/// <summary>
/// Intelligent Threat Pattern Analyzer - Advanced AI-powered pattern recognition
/// Detects sophisticated phishing techniques and social engineering
/// </summary>
public sealed class IntelligentThreatPatternRule : IRule
{
    // Advanced phishing patterns
    private static readonly Dictionary<string, (Regex Pattern, double Score, string Description)> ThreatPatterns = new()
    {
        ["urgent_banking"] = (
            new Regex(@"(urgent|kh·∫©n c·∫•p).{0,50}(bank|ng√¢n h√†ng|account|t√†i kho·∫£n)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.8, "Urgent banking social engineering"
        ),
        ["fake_security_alert"] = (
            new Regex(@"(security alert|c·∫£nh b√°o b·∫£o m·∫≠t).{0,30}(verify|x√°c th·ª±c|update|c·∫≠p nh·∫≠t)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.7, "Fake security alert pattern"
        ),
        ["account_suspension"] = (
            new Regex(@"(suspend|kh√≥a|block|ch·∫∑n).{0,30}(account|t√†i kho·∫£n).{0,30}(verify|click|x√°c th·ª±c)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.8, "Account suspension threat"
        ),
        ["otp_harvesting"] = (
            new Regex(@"(enter|nh·∫≠p).{0,20}(otp|m√£).{0,30}(verify|x√°c th·ª±c|confirm|x√°c nh·∫≠n)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.9, "OTP harvesting attempt"
        ),
        ["time_pressure"] = (
            new Regex(@"(expire|h·∫øt h·∫°n|deadline).{0,20}(hour|gi·ªù|minute|ph√∫t|day|ng√†y)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.6, "Time pressure manipulation"
        ),
        ["fake_prize"] = (
            new Regex(@"(congratulation|ch√∫c m·ª´ng|winner|tr√∫ng).{0,50}(prize|gi·∫£i th∆∞·ªüng|claim|nh·∫≠n)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.7, "Fake prize/lottery scam"
        ),
        ["credential_phishing"] = (
            new Regex(@"(login|ƒëƒÉng nh·∫≠p).{0,30}(verify|x√°c th·ª±c).{0,30}(identity|danh t√≠nh|credential)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.8, "Credential phishing attempt"
        ),
        ["authority_impersonation"] = (
            new Regex(@"(police|c·∫£nh s√°t|government|ch√≠nh ph·ªß|bank|ng√¢n h√†ng).{0,30}(official|ch√≠nh th·ª©c).{0,30}(notice|th√¥ng b√°o)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.8, "Authority impersonation"
        ),
        ["vietnamese_scam_phrases"] = (
            new Regex(@"(c·∫ßn g·∫•p|kh·∫©n c·∫•p|ngay l·∫≠p t·ª©c).{0,30}(x√°c th·ª±c|verify|update|c·∫≠p nh·∫≠t)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.7, "Vietnamese urgency scam phrases"
        )
    };

    // Sophisticated domain patterns
    private static readonly Dictionary<string, (Regex Pattern, double Score, string Description)> DomainPatterns = new()
    {
        ["typosquatting_bank"] = (
            new Regex(@"(viet-com|tech-com|vietin-bank|bi-dv|v-cb|t-cb)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.9, "Vietnamese bank typosquatting"
        ),
        ["suspicious_subdomain"] = (
            new Regex(@"(secure|security|verify|update|login)\.([\w-]+\.)+\w+", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.6, "Suspicious security-themed subdomain"
        ),
        ["bank_with_number"] = (
            new Regex(@"(vietcombank|techcombank|bidv|acb)\d+", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.8, "Bank name with numbers (suspicious)"
        ),
        ["gambling_domain"] = (
            new Regex(@"(bet|casino|poker|slot)\d*\.(tk|ml|ga|cf|club|xyz)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.9, "Gambling domain with suspicious TLD"
        ),
        // CRITICAL: Vietnamese casino patterns
        ["vietnamese_casino_nohu"] = (
            new Regex(@"(nohu|no-hu|nohutop|gamebai|game-bai)\d*", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.95, "Vietnamese casino/n·ªï h≈© site pattern"
        ),
        ["casino_number_pattern"] = (
            new Regex(@"(nohu|bai|game|casino|slot)\d+|" +
                     @"\d+(win|bet|game|casino|nohu|bai)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.9, "Casino with number pattern (nohu90, game88, etc.)"
        ),
        ["vietnamese_gambling_slang"] = (
            new Regex(@"(doi-thuong|doithuong|an-tien|antien|bai-doi-thuong)", RegexOptions.IgnoreCase | RegexOptions.Compiled),
            0.85, "Vietnamese gambling slang in domain"
        )
    };

    // Behavioral indicators
    private static readonly string[] SocialEngineeringTriggers = {
        "act now", "limited time", "urgent action required", "verify immediately",
        "h√†nh ƒë·ªông ngay", "th·ªùi gian c√≥ h·∫°n", "y√™u c·∫ßu kh·∫©n c·∫•p", "x√°c th·ª±c ngay l·∫≠p t·ª©c",
        "click here", "download now", "call now", "update required",
        "nh·∫•n v√†o ƒë√¢y", "t·∫£i v·ªÅ ngay", "g·ªçi ngay", "c·∫ßn c·∫≠p nh·∫≠t"
    };

    public RuleResult Evaluate((string Host, string Path, string? Text) features)
    {
        double maxScore = 0;
        var detectedThreats = new List<string>();
        var tags = new HashSet<string>();

        var host = features.Host.ToLowerInvariant();
        var path = features.Path.ToLowerInvariant();
        var text = (features.Text ?? "").ToLowerInvariant();
        var combinedContent = $"{host} {path} {text}";

        // 1. ADVANCED PATTERN ANALYSIS
        foreach (var (name, (pattern, score, description)) in ThreatPatterns)
        {
            if (pattern.IsMatch(combinedContent))
            {
                maxScore = Math.Max(maxScore, score);
                detectedThreats.Add($"üö® {description}");
                tags.Add($"threat_{name}");
            }
        }

        // 2. DOMAIN PATTERN ANALYSIS
        var domainToCheck = $"{host}{path}";
        foreach (var (name, (pattern, score, description)) in DomainPatterns)
        {
            if (pattern.IsMatch(domainToCheck))
            {
                maxScore = Math.Max(maxScore, score);
                detectedThreats.Add($"üé≠ {description}");
                tags.Add($"domain_{name}");
            }
        }

        // 3. SOCIAL ENGINEERING DETECTION
        var socialEngineeringCount = SocialEngineeringTriggers.Count(trigger => 
            combinedContent.Contains(trigger));
        
        if (socialEngineeringCount > 2)
        {
            maxScore = Math.Max(maxScore, 0.7);
            detectedThreats.Add($"üß† Social engineering: {socialEngineeringCount} manipulation triggers");
            tags.Add("social_engineering");
        }
        else if (socialEngineeringCount > 0)
        {
            maxScore = Math.Max(maxScore, 0.4);
            detectedThreats.Add($"‚ö†Ô∏è Persuasion tactics detected: {socialEngineeringCount} triggers");
            tags.Add("persuasion_tactics");
        }

        // 4. VIETNAMESE-SPECIFIC INTELLIGENCE
        var vietnameseScore = AnalyzeVietnameseContext(combinedContent);
        if (vietnameseScore > 0)
        {
            maxScore = Math.Max(maxScore, vietnameseScore);
            detectedThreats.Add("üáªüá≥ Vietnamese-specific threat pattern");
            tags.Add("vietnamese_specific");
        }

        // 5. MULTI-VECTOR ANALYSIS
        var vectorCount = CountAttackVectors(host, path, text);
        if (vectorCount > 2)
        {
            maxScore = Math.Max(maxScore, 0.6);
            detectedThreats.Add($"üéØ Multi-vector attack: {vectorCount} attack vectors");
            tags.Add("multi_vector");
        }

        // 6. CONFIDENCE BOOSTING
        if (detectedThreats.Count > 2)
        {
            maxScore = Math.Min(1.0, maxScore * 1.2); // Boost confidence
            tags.Add("high_confidence");
        }

        return new RuleResult(
            Math.Min(1.0, maxScore),
            string.Join("; ", detectedThreats),
            string.Join(",", tags.Distinct())
        );
    }

    private double AnalyzeVietnameseContext(string content)
    {
        // Vietnamese banking context
        var vietnameseBankingPhrases = new[]
        {
            "t√†i kho·∫£n ng√¢n h√†ng", "chuy·ªÉn kho·∫£n", "s·ªë d∆∞ t√†i kho·∫£n",
            "th·∫ª t√≠n d·ª•ng", "m√£ pin", "m√£ otp", "b·∫£o m·∫≠t ng√¢n h√†ng"
        };

        // Vietnamese urgency context
        var vietnameseUrgencyPhrases = new[]
        {
            "kh·∫©n c·∫•p", "ngay l·∫≠p t·ª©c", "h·∫øt h·∫°n", "s·∫Øp h·∫øt h·∫°n",
            "c·∫ßn g·∫•p", "th·ªùi gian c√≥ h·∫°n", "deadline"
        };

        var bankingCount = vietnameseBankingPhrases.Count(phrase => content.Contains(phrase));
        var urgencyCount = vietnameseUrgencyPhrases.Count(phrase => content.Contains(phrase));

        if (bankingCount > 0 && urgencyCount > 0)
            return 0.8; // High risk: Banking + Urgency
        if (bankingCount > 1)
            return 0.6; // Medium risk: Multiple banking terms
        if (urgencyCount > 1)
            return 0.4; // Low-medium risk: Multiple urgency terms

        return 0;
    }

    private int CountAttackVectors(string host, string path, string text)
    {
        int vectors = 0;

        // URL vector
        if (host.Contains("-") || host.Contains("security") || host.Contains("verify"))
            vectors++;

        // Path vector
        if (path.Contains("login") || path.Contains("verify") || path.Contains("update"))
            vectors++;

        // Content vector
        if (text.Contains("otp") || text.Contains("password") || text.Contains("verify"))
            vectors++;

        // Social engineering vector
        if (SocialEngineeringTriggers.Any(trigger => text.Contains(trigger)))
            vectors++;

        return vectors;
    }
}